/*what is Promise and how it is wroks*/
let promice = new Promise(function myFun(resolve, reject) {
    alert("hello");
    resolve(56);
})
console.log("hello one");
setTimeout(() => {
    console.log("hello world");
}, 1000);

console.log("my name is mou mandal");
console.log(promice);


/*how to works catch() and then() on Promise*/
let p = new Promise((resolve, reject) => {
    console.log("I am pending");
    setTimeout(() => {
        console.log("I am promise and i am fulfilled");
        resolve(true);
    }, 1000);
})
let p1 = new Promise((resolve, reject) => {
    console.log("I am pending");
    setTimeout(() => {
        console.log("I am promise and i am rejected");
        reject(new Error("i am a error"));
    }, 1000);
})
console.log(p, p1);
p.then((value) => {
    console.log(value);
})
/* p1.then((value) => {
   console.log(value);
 }, (error) => {
     console.log(error);
 })
 */
p1.catch((error) => {
    console.log(error);
    })


/*Promise is always works parallel*/
let p1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("Resolved after 2 seconds");
        resolve(56);
    }, 1000);
})
p1.then((value) => {
    console.log(value);
    let p2= new Promise((resolve, reject) => {
        setTimeout(() => {
           resolve("promise 2")
        }, 1000);
    })
    return p2;
}).then((value) => {
    console.log("we are done");
    return 2;
}).then((value) => {
    console.log("now we are pakka done");
})
console.log(p1);



/*loadScript*/
const loadScript = (src) => {
    return new Promise((resolve, reject) => {
        let script = document.createElement("script");
        script.type = "text/javascript";
        script.src = src;
        document.body.appendChild(script)
        script.onload = (script) => {
            resolve("Script has been loaded ");
        }
        script.onerror = () => {
            reject(0)
        }
    })
}
let p1 = loadScript("https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js")
p1.then((value) => {
    console.log(value)
    return loadScript("https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js");
}).then((value) => {
    console.log("second script is ready");
}).catch((error) => {
    console.log("we are sorry but we are having problem for load this script");
})


/*Attaching multiple handlers to a Promise*/
let promise = new Promise((resolve, reject) => {
    // alert("hey i am not resolved");
    setTimeout(() => {
        resolve(12);
    }, 1000);
})
promise.then(() => {
    console.log("congratulations this promise is resolved");
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve (4);
        }, 4000);
    })
}).then((value) => {
    console.log(value);
})
promise.then(() => {
    console.log("hurray");
})


/*promise APi*/
let p = new Promise((resolve, rejects) => {
    setTimeout(() => {
        resolve(12);
        /*reject(1)*/
    }, 1000);
})/* .then((value) => {
        console.log(value);
})*/

let p1 = new Promise((resolve, rejects) => {
    setTimeout(() => {
        resolve(13);
    }, 1000);
})/*.then((value) => {
    console.log(value);
})*/

let p2 = new Promise((resolve, rejects) => {
    setTimeout(() => {
        resolve(14);
    }, 1000);
})/*.then((value) => {
    console.log(value);
})*/

/*Promise.all*/
// let promice = Promise.all([p, p1, p2]);
// promice.then((value) => {
//     console.log(value);
// })

/*Promise.allSettled*/
// let promice = Promise.allSettled([p, p1, p2]);
// promice.then((value) => {
//     console.log(value);
// })

/*Promise.race*/
// let promice = Promise.race([p, p1, p2]);
// promice.then((value) => {
//     console.log(value);
// })

/*Promise.any*/
// let promice = Promise.any([p, p1, p2]);
// promice.then((value) => {
//     console.log(value);
// })/*This method is always waiting for resolve not rejects*/



/*Async_Await in js*/
async function harry() {
    let Delhi = new Promise((resolve, rejects) => {
        setTimeout(() => {
            resolve("45 deg");
        }, 1000);
    })
    let Mumbai = new Promise((resolve, rejects) => {
        setTimeout(() => {
            resolve(" 40 deg");
        }, 5000);
    })
    console.log("fetching delhi weather please wait");
    let delhi = await Delhi;
    console.log("weather is display " + delhi);
    console.log("fetching mumbai weather please wait");
    let mumbai = await Mumbai;
    console.log("weather is display " + mumbai);
    return [delhi, mumbai];
}
const cherry=(() => {
    console.log("hey i am cherry i am  waiting");
})
const main1 = async () => {
    console.log("Welcome to weather control room");
    let a =  await harry();
    let b = await cherry();
}
 main1();


/*Error handling try and catch in js*/
setTimeout(() => {
    console.log("hacking ram's insta password.....");
}, 1000);
try {
    console.log(ram);
}
/*try {
    setTimeout(() => {
        try {
            console.log("hii");
        }
        catch (err) {
            console.log("happy" + err);
        }
    }, 1000);
    console.log(ram);
}*/
catch (error) {
    console.log("hurray "+error);
}
setTimeout(() => {
    console.log("hacking ram's eamil id.....");
}, 1000);

setTimeout(() => {
    console.log("hacking ram's fackbook id.....");
}, 1000);

setTimeout(() => {
    console.log("User name and password of ram's (+91 8509094606)please wait......");
}, 1000);


/*The error Object in js*/
try {
    /*harry;*/
    /*throw new Error("mou is not good");*/
    /*throw new ReferenceError("mou is not bad");*/
    let age = prompt("Enter your age");
    age = Number.parseInt(age);
    if (age > 100) {
        throw new ReferenceError("Invalid age");
    }
}
catch (error) {
    console.log(error.name);
    console.log(error.message);
    console.log(error.stack);
}

/*The finally clause in js*/
/*let c = (() => {*/
try {
    let a = 0;
    console.log(programme);
    console.log("This programme is run successfylly");
    /*return;*/
}
catch (error) {
    console.log("This code will be not executed");
}
finally {
    console.log("This code is always run successfully");
}
/*})
c();
console.log("end");*/


/*pratice set*/
const loadScript = async (src) => {
    return new Promise((resolve, reject) => {
        let script = document.createElement("script");
        script.src = src;
        script.onload = () => {
            resolve(src + "Done success");
        }
        document.head.append(script);
    })
}
/*problem 1*/
// let a = loadScript("https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js");
// a.then((value) => {
//     console.log(value);
// })

/*problem2*/
// const main2 = async () => {
//     console.log(new Date().getMilliseconds());
//     let a = await loadScript("https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js");
//     console.log(a);
//     console.log(new Date().getMilliseconds());
// }
// main2();

/*problem3*/
// let p = () => {
//     return new Promise((resolve, reject) => {
//         setTimeout(() => {
//             reject(new Error("reject a new error"));
//         }, 1000);
//     })
// }

// let a = async () => {
//     try {
//         let c = await p();
//         console.log(c);
//     }
//     catch (error) {
//         console.log("this error has been handled");
//     }
// }
// a();
    let todor = await createTodo(todo);
    console.log(todor);
    console.log(await getTodo(5))
}
mainFunc();

